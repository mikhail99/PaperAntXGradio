import json
import os
from typing import Dict, List, Optional, Any, Generator
#from .llm_service import LLMService
import dspy
from langchain_community.tools.yahoo_finance_news import YahooFinanceNewsTool
from dspy.adapters.types.tool import Tool
import json
import yfinance as yf
import asyncio
import pandas as pd
from gradio import ChatMessage
from queue import Queue
import threading
import gradio as gr

# Configure DSPy
dspy.configure(lm=dspy.LM('ollama_chat/qwen3:4b', api_base='http://localhost:11434', api_key=''))

class QueryAgent(dspy.Module):
    """ReAct agent for financial analysis using Yahoo Finance data."""

    def __init__(self):
        super().__init__()

    def forward(self, user_request: str, past_user_requests: str, question_topic: str):
        return "Hello, world!"

class CopilotProjectPortfolioService:
    def __init__(self) -> None:
        """Initialize CopilotService with agent modules"""
        #self.llm_service = llm_service
        self.agents : Dict[str, dspy.Module] = self._create_agents()
    
    def _create_agents(self) -> Dict[str, dspy.Module]:
        """Create agent instances"""
        return {
            "Local Project Proposals": QueryAgent(),  #(self.llm_service),
            "External Project Proposals": QueryAgent(),  #(self.llm_service),
        }
    
    def get_agent_list(self) -> List[str]:
        """Returns a list of available agent names."""
        return sorted(list(self.agents.keys()))
    
    def get_agent_details(self, agent_name: str = None) -> Dict[str, str]:
        """Returns the configuration for a specific agent or all agents."""
        all_details = {
            "Local Project Proposals": {
                "short_description": "A local project proposal assistant that can answer questions about projects proposals generated by the user.",
                "full_description": "A local project proposal assistant that can answer questions about projects proposals generated by the user.",
                "tools": []
            },
            "External Project Proposals": {
                "short_description": "A external project proposal assistant that can answer questions about projects proposals generated outside the app.",
                "full_description": "A external project proposal assistant that can answer questions about projects proposals generated outside the app.",
                "tools": []
            },
        }
        
        if agent_name:
            return all_details.get(agent_name)
        return all_details

    def reload(self) -> None:
        """Reload agent configurations - placeholder for UI compatibility."""
        print(f"Reloading {self.__class__.__name__} - agents recreated")
        self.agents = self._create_agents()
    
    def chat_with_agent(self, agent_name: str, message: str, llm_history: List[Dict[str, Any]], provider: str = "ollama") -> Generator[Dict, None, None]:
        """Route chat to the appropriate agent module"""
        
        agent : dspy.Module = self.agents.get(agent_name)
        ## Add the new user message to the conversation history.
        #messages: List[Dict[str, Any]] = llm_history + [{"role": "user", "content": message}]
    
        # Delegate to the specific agent
        past_messages = " \n ".join([h["role"] + ": " + h["content"] for h in llm_history ][-5:])
        topic = "LLM for Math" 
       
        #assistant_message = {"role": "assistant", "content": answer}
        #messages.append(assistant_message)

        agent.query_tools.flow_log = []
        answer = agent(message, past_messages, topic) # ,llm_history, provider)
        return answer, agent.query_tools.flow_log

