import operator
from typing import TypedDict, List
from typing_extensions import Annotated
from pydantic import BaseModel, Field


# --- Pydantic Models for State ---

class Paper(BaseModel):
    """Represents a single research paper."""
    id: str
    title: str
    summary: str
    authors: list[str]
    url: str

class QueryList(BaseModel):
    """A list of search queries."""
    queries: List[str] = Field(description="A list of search queries.")

class Reflection(BaseModel):
    """Reflection on the gathered information."""
    is_sufficient: bool = Field(description="Is the literature review sufficient?")
    knowledge_gap: str = Field(description="Identified gaps in the literature.")
    follow_up_queries: List[str] = Field(description="New queries to address gaps.")

class NoveltyAssessment(BaseModel):
    """Assessment of the research plan's novelty."""
    is_novel: bool = Field(description="Is the research plan novel enough to proceed?")
    justification: str = Field(description="Justification for the novelty assessment.")
    similar_papers: list[dict] = Field(default=[], description="List of similar papers found, with title and url.")

class ExperimentProtocol(BaseModel):
    """Detailed plan for experiments."""
    methodology: str = Field(description="The proposed methodology.")
    datasets: list[str] = Field(description="Datasets to be used.")
    evaluation_metrics: list[str] = Field(description="Metrics for evaluation.")
    pseudocode: str = Field(description="Pseudocode for the core algorithm.")

class ProposalCritique(BaseModel):
    """Structured feedback from the review phase."""
    strengths: str = Field(description="Positive aspects of the proposal.")
    weaknesses: str = Field(description="Areas for improvement.")
    revision_required: bool = Field(description="Is a revision necessary?")
    suggested_changes: str = Field(description="Specific suggestions for revision.")


# --- The Global State ---

class ProposalAgentState(TypedDict, total=False):
    """
    The complete state for the proposal generation agent.

    Attributes:
        topic: The main research topic or question provided by the user. Set from the user's initial message and used as the basis for generating search queries.
        search_queries: List of search queries generated for literature search, typically by the LLM. Used to drive the literature search loop; each query is run in sequence.
        query_index: Index of the current search query being processed. Used to track progress through the search_queries list.
        papers: List of Paper objects representing research papers found and stored during the process. Used for accumulating all papers retrieved from searches.
        literature_summary: The accumulated summary of the literature found so far. Synthesized from the results of running the search queries. Used as input for reflection and plan formulation.
        literature_summaries: List of individual summaries for each query run. Each entry corresponds to the result of a single search query. Used to build the overall literature_summary.
        literature_review_loops: Counter for how many times the literature review loop has run. Used to limit the number of review cycles and control agent flow.
        reflection: Reflection object containing the agent's assessment of the literature review. Includes sufficiency, knowledge gaps, and follow-up queries. Used to decide whether to continue searching or proceed to planning.
        research_plan: The high-level research plan generated by the agent. Synthesized from the literature summary and knowledge gap.
        novelty_assessment: Assessment of the novelty of the research plan, including justification and similar papers. Used to determine if the plan is sufficiently original to proceed.
        experiment_protocol: Detailed experimental protocol for the proposed research. Includes methodology, datasets, evaluation metrics, and pseudocode.
        markdown_proposal: The full research proposal in markdown format, synthesized from all previous steps.
        critique: Structured feedback on the proposal, including strengths, weaknesses, and revision requirements. Used to determine if further revision is needed.
        messages: List of messages exchanged (user and agent). Used to track conversation history and extract the latest user question.
        max_loops: Maximum number of allowed research/review loops. Used to prevent infinite cycles in the agent's workflow.
        loop_count: Current count of completed research/review loops. Used to track progress and enforce max_loops.
        local_papers_only: If True, restricts literature search to local database only (no external queries). Used to control the scope of paper retrieval.
        research_papers_count: Count of research papers retrieved/used so far. Used to enforce limits on the number of papers processed.
        reflection_papers_count: Count of papers used for reflection/novelty assessment. Used to enforce limits on the number of papers considered for novelty.
        collection_id: Identifier for the ChromaDB collection used for storing and retrieving papers. Used to scope all database operations to a specific collection.
    """

    # Core Research
    topic: str
    search_queries: Annotated[list[str], operator.add]
    query_index: int
    papers: Annotated[list[Paper], operator.add]
    literature_summary: str
    literature_summaries: list[str]
    literature_review_loops: int
    reflection: Reflection

    # Planning & Design
    research_plan: str
    novelty_assessment: NoveltyAssessment
    experiment_protocol: ExperimentProtocol

    # Writing & Refinement
    markdown_proposal: str
    critique: ProposalCritique
    
    # Control Flow
    messages: list
    max_loops: int
    loop_count: int
    local_papers_only: bool
    
    # Paper Limits
    research_papers_count: int
    reflection_papers_count: int
    
    # Collection
    collection_id: str
